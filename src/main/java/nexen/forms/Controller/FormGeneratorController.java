package nexen.forms.Controller;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;

import java.util.List;

import nexen.forms.Dao.FormsJdbcTemplate;
import nexen.forms.domain.ErrorMessage;
import nexen.forms.domain.Form;
import nexen.forms.domain.FormResponse;
import nexen.forms.domain.MetaData;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

import springfox.documentation.swagger2.annotations.EnableSwagger2;

@EnableSwagger2
@Api(value = "Form Generation")
@RestController
public class FormGeneratorController {
	@Autowired
	FormsJdbcTemplate formsJdbcTemplate;
	

	

	@ApiOperation(value = "Generating the new form for the users", notes = "More notes about this method", response = FormResponse.class)
	@ApiParam(name = "formObject", value = "Contains form elements", required = true)
	@ResponseStatus(value = HttpStatus.CREATED)
	@ApiResponses(value = {
			@ApiResponse(code = 201, message = "successfull generation of form", response = FormResponse.class),
			@ApiResponse(code = 404, message = "form generation failed", response = FormResponse.class),
			@ApiResponse(code = 400, message = "bad request for form generation", response = FormResponse.class),
			@ApiResponse(code = 500, message = "Internal Server Error", response = FormResponse.class) })
	
	
	@RequestMapping(value="/formcreators",method=RequestMethod.POST,consumes = MediaType.APPLICATION_JSON_VALUE, produces = { MediaType.APPLICATION_JSON_VALUE })
	public String insertForm(@RequestBody Form form)
	{  String reply="";
		try
		{
	 reply=formsJdbcTemplate.insertForm(form);
		return reply;
	}
	catch(Exception e)
	{
		reply=e.getMessage();
		return reply;
	} 
		
	}
	
	@ApiOperation(value = "Retrival of form data", notes = "More notes about this method", response = FormResponse.class)
	@ApiParam(name = "formId", value = "unique form id to fetch particular form data", required = true)
	@ResponseStatus(value = HttpStatus.CREATED)
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = "retrival of form details filled by users", response = FormResponse.class),
			@ApiResponse(code = 404, message = "retrival failed", response = FormResponse.class),
			@ApiResponse(code = 400, message = "no such form id exists", response = FormResponse.class),
			@ApiResponse(code = 500, message = "Internal Server Error", response = FormResponse.class) })
	
	
	@RequestMapping(value="/formcreators/{formId}",method=RequestMethod.GET,produces = { MediaType.APPLICATION_JSON_VALUE })
	public ResponseEntity<FormResponse> getFormDetails(@ApiParam(name = "formId", value = "unique form id to fetch the record of particular form", required = true)@PathVariable("formId") int formId)
	{
		List FormUsersList=null;
		try {
			FormUsersList = formsJdbcTemplate.getDetails(formId);
			FormResponse response=new FormResponse();
			response.setFormOutput(FormUsersList);
			MetaData metaData=new MetaData();
			metaData.setResponseCode(200);
			metaData.setDescription("Sucessfully Loaded");
			response.setMetaData(metaData);
			response.setError(null);
			return new ResponseEntity<FormResponse>(response,HttpStatus.OK);
			
		
		} catch (Exception e) {
			FormResponse response=new FormResponse();
			ErrorMessage errorDetails=new ErrorMessage();
			MetaData metaData = new MetaData();
			metaData.setResponseCode(400);
			metaData.setDescription("Retrival of form data is not successfull");
			if(e.getMessage().equals("Incorrect result size: expected 1, actual 0"))
			{
	errorDetails.setErrorCode(400);
	errorDetails.setErrorDescription("form id not exists");
			
			}
			else
			{
				errorDetails.setErrorCode(500);
				errorDetails.setErrorDescription(e.getMessage());
			}
			
			response.setMetaData(metaData);
			response.setError(errorDetails);
			response.setFormOutput(null);
			return new ResponseEntity<FormResponse>(response,HttpStatus.BAD_REQUEST);
		}
	
	}
	@ApiOperation(value = "deleting the  form generated by creator", notes = "More notes about this method", response = FormResponse.class)
	@ApiParam(name = "formId", value = "Contains form id", required = true)
	@ResponseStatus(value = HttpStatus.CREATED)
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = "successfull deletion of form", response = FormResponse.class),
			@ApiResponse(code = 404, message = "form deletion failed", response = FormResponse.class),
			@ApiResponse(code = 400, message = "bad request for form deletion", response = FormResponse.class),
			@ApiResponse(code = 500, message = "Internal Server Error", response = FormResponse.class) })
	
	
	@RequestMapping(value="/formcreators/{formId}",method=RequestMethod.DELETE,consumes = MediaType.APPLICATION_JSON_VALUE, produces = { MediaType.APPLICATION_JSON_VALUE })
	public String deleteForm(@PathVariable("formId") int formId)
	{  String reply="";
		try
		{
	 reply=formsJdbcTemplate.deleteForm(formId);
		return reply;
	}
	catch(Exception e)
	{
		reply=e.getMessage();
		return reply;
	} 
		
	}
	

}
